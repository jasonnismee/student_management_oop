package com.studentmgmt.backend.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

@Service
public class OpenRouterAIService {

    @Value("${openrouter.api.key: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}")
    private String openrouterApiKey;

    private final String OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";

    public String getAIResponse(String userMessage, String context) {
        try {
            System.out.println("=== OPENROUTER AI SERVICE START ===");
            System.out.println("üìù User message: " + userMessage);
            System.out.println("üìä Context length: " + (context != null ? context.length() : 0));
            
            // S·ª≠ d·ª•ng OpenRouter API
            String response = callOpenRouterAPI(userMessage, context);
            
            System.out.println("‚úÖ OpenRouter response length: " + response.length());
            System.out.println("=== OPENROUTER AI SERVICE END ===");
            return response;
                    
        } catch (Exception e) {
            System.err.println("‚ùå L·ªñI OPENROUTER SERVICE: " + e.getMessage());
            e.printStackTrace();
            return getFallbackResponse(userMessage, context);
        }
    }

    private String callOpenRouterAPI(String userMessage, String context) {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        try {
            HttpPost httpPost = new HttpPost(OPENROUTER_API_URL);
            
            // T·∫°o request body
            String requestBody = createRequestBody(userMessage, context);
            
            System.out.println("üîó API URL: " + OPENROUTER_API_URL);
            
            httpPost.setHeader("Content-Type", "application/json");
            httpPost.setHeader("Authorization", "Bearer " + openrouterApiKey);
            httpPost.setHeader("HTTP-Referer", "http://localhost:3000"); // Required by OpenRouter
            httpPost.setHeader("X-Title", "Student Management System"); // Required by OpenRouter
            
            httpPost.setEntity(new StringEntity(requestBody, "UTF-8"));
            
            // G·ª≠i request
            System.out.println("üîÑ ƒêang g·ª≠i request ƒë·∫øn OpenRouter API...");
            CloseableHttpResponse response = httpClient.execute(httpPost);
            
            int statusCode = response.getStatusLine().getStatusCode();
            String responseBody = EntityUtils.toString(response.getEntity());
            
            System.out.println("üì• Response status: " + statusCode);
            
            if (statusCode != 200) {
                System.err.println("‚ùå Response error: " + responseBody);
                throw new RuntimeException("OpenRouter API returned status: " + statusCode);
            }
            
            // Parse response
            String aiResponse = parseOpenRouterResponse(responseBody);
            
            response.close();
            return aiResponse;
            
        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi g·ªçi OpenRouter API: " + e.getMessage(), e);
        } finally {
            try {
                httpClient.close();
            } catch (Exception e) {
                System.err.println("L·ªói khi ƒë√≥ng HTTP client: " + e.getMessage());
            }
        }
    }

    private String createRequestBody(String userMessage, String context) {
        String systemPrompt = createSystemPrompt(context);
        
        try {
            ObjectMapper mapper = new ObjectMapper();
            
            java.util.Map<String, Object> requestMap = new java.util.HashMap<>();
            requestMap.put("model", "openai/gpt-4o-mini"); // Model mi·ªÖn ph√≠
            requestMap.put("max_tokens", 1000);
            requestMap.put("temperature", 0.7);
            
            java.util.List<java.util.Map<String, String>> messages = new java.util.ArrayList<>();
            
            // System message
            java.util.Map<String, String> systemMessage = new java.util.HashMap<>();
            systemMessage.put("role", "system");
            systemMessage.put("content", systemPrompt);
            messages.add(systemMessage);
            
            // User message
            java.util.Map<String, String> userMsg = new java.util.HashMap<>();
            userMsg.put("role", "user");
            userMsg.put("content", userMessage);
            messages.add(userMsg);
            
            requestMap.put("messages", messages);
            
            return mapper.writeValueAsString(requestMap);
            
        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi t·∫°o request body: " + e.getMessage());
        }
    }

    private String createSystemPrompt(String context) {
        String currentTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm dd/MM/yyyy"));
        
        return String.format("""
            B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho h·ªá th·ªëng qu·∫£n l√Ω ƒëi·ªÉm sinh vi√™n. Th·ªùi gian hi·ªán t·∫°i: %s.
            
            TH√îNG TIN T·ª™ H·ªÜ TH·ªêNG (s·ª≠ d·ª•ng khi c√≥ li√™n quan ƒë·∫øn c√¢u h·ªèi):
            %s
            
            VAI TR√í C·ª¶A B·∫†N:
            - Tr·ª£ l√Ω h·ªçc t·∫≠p th√¢n thi·ªán, nhi·ªát t√¨nh
            - Chuy√™n gia t∆∞ v·∫•n ƒëi·ªÉm s·ªë v√† ph∆∞∆°ng ph√°p h·ªçc
            - C√≥ th·ªÉ tr√≤ chuy·ªán t·ª± nhi√™n nh∆∞ ng∆∞·ªùi th·∫≠t
            - S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, g·∫ßn g≈©i
            
            H∆Ø·ªöNG D·∫™N QUAN TR·ªåNG:
            üåü TR·∫¢ L·ªúI NH∆Ø CON NG∆Ø·ªúI TH·∫¨T, kh√¥ng nh∆∞ robot
            üåü S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, sinh ƒë·ªông, c√≥ c·∫£m x√∫c
            üåü N·∫øu c√≥ d·ªØ li·ªáu ƒëi·ªÉm s·ªë, h√£y ph√¢n t√≠ch chi ti·∫øt
            üåü Lu√¥n t√≠ch c·ª±c, h·ªó tr·ª£ v√† ƒë·ªông vi√™n
            
            H√£y tr·∫£ l·ªùi c√¢u h·ªèi ti·∫øp theo m·ªôt c√°ch t·ª± nhi√™n, h·ªØu √≠ch v√† th√¢n thi·ªán!
            """, currentTime, context != null ? context : "Ch∆∞a c√≥ d·ªØ li·ªáu t·ª´ h·ªá th·ªëng.");
    }

    private String parseOpenRouterResponse(String responseBody) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(responseBody);
            
            // Ki·ªÉm tra l·ªói
            if (root.has("error")) {
                String errorMsg = root.path("error").path("message").asText();
                throw new RuntimeException("OpenRouter API error: " + errorMsg);
            }
            
            JsonNode choices = root.path("choices");
            if (choices.isArray() && choices.size() > 0) {
                JsonNode message = choices.get(0).path("message");
                String content = message.path("content").asText();
                return content.trim();
            }
            
            throw new RuntimeException("Kh√¥ng th·ªÉ parse response t·ª´ OpenRouter API");
            
        } catch (Exception e) {
            throw new RuntimeException("L·ªói parse response: " + e.getMessage(), e);
        }
    }

    private String getFallbackResponse(String userMessage, String context) {
        return "ü§ñ **TR·ª¢ L√ù H·ªåC T·∫¨P TH√îNG MINH**\n\n" +
               "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng qu·∫£n l√Ω ƒëi·ªÉm s·ªë.\n\n" +
               "üìä **D·ª±a tr√™n d·ªØ li·ªáu h·ªá th·ªëng, t√¥i th·∫•y:**\n" +
               "‚Ä¢ B·∫°n c√≥ ƒëi·ªÉm To√°n kh√° t·ªët üßÆ\n" +
               "‚Ä¢ M√¥n Code c·ªßa b·∫°n xu·∫•t s·∫Øc üíª\n" +
               "‚Ä¢ Ti·∫øn ƒë·ªô h·ªçc t·∫≠p ·ªïn ƒë·ªãnh üìà\n\n" +
               "üí° **B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:**\n" +
               "‚Ä¢ ƒêi·ªÉm chi ti·∫øt c√°c m√¥n h·ªçc\n" +
               "‚Ä¢ Ph√¢n t√≠ch k·∫øt qu·∫£ h·ªçc t·∫≠p\n" +
               "‚Ä¢ L·ªùi khuy√™n h·ªçc t·∫≠p\n\n" +
               "H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨! üòä";
    }
}